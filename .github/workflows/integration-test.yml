# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Run Integration Tests
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE }}
  CF_KEY_NAME: ${{ secrets.CF_KEY_NAME }}
  ECR_INTEGRATION_TEST_REPO: "cwagent-integration-test"
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"
  CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
  CWA_GITHUB_TEST_REPO_BRANCH: "main"
  TERRAFORM_AWS_ASSUME_ROLE_ITAR: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
  S3_INTEGRATION_BUCKET_ITAR: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}
  TERRAFORM_AWS_ASSUME_ROLE_CN: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}
  S3_INTEGRATION_BUCKET_CN: ${{ vars.S3_INTEGRATION_BUCKET_CN }}

on:
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'The ID of the build-test-artifacts workflow run'
        type: number
        required: true
      build_sha:
        description: 'The SHA of the build-test-artifacts workflow run'
        type: string
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  CheckBuildTestArtifacts:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ inputs.build_sha }} == ${{ github.sha }} ]]; then
            echo "Build SHA matches test SHA"
          else
            echo "Build SHA does not match test SHA"
            exit 1
          fi
      - run: |
          conclusion=$(gh run view ${{ inputs.build_run_id }} --repo $GITHUB_REPOSITORY --json conclusion -q '.conclusion')
          if [[ $conclusion == "success" ]]; then
            echo "Run succeeded"
          else
            echo "Run failed"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  GenerateTestMatrix:
    needs: [ CheckBuildTestArtifacts ]
    name: 'GenerateTestMatrix'
    runs-on: ubuntu-latest
    outputs:

      ec2_linux_itar_matrix: ${{ steps.set-matrix.outputs.ec2_linux_itar_matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2

      - name: Generate matrix
        id: set-matrix
        run: |
          go run --tags=generator generator/test_case_generator.go
          echo "::set-output name=ec2_linux_itar_matrix::$(echo $(cat generator/resources/ec2_linux_itar_complete_test_matrix.json))"

      - name: Echo test plan matrix
        run: |
          echo "ec2_linux_itar_matrix: ${{ steps.set-matrix.outputs.ec2_linux_itar_matrix }}"

  

  StartLocalStackITAR:
    name: 'StartLocalStackITAR'
    needs: [OutputEnvVariables]
    uses: ./.github/workflows/start-localstack.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      region: us-gov-east-1
      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}
      github_sha: ${{github.sha}}
      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}




  OutputEnvVariables:
    needs: [CheckBuildTestArtifacts]
    name: 'OutputEnvVariables'
    runs-on: ubuntu-latest
    outputs:
      CWA_GITHUB_TEST_REPO_NAME: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      CWA_GITHUB_TEST_REPO_URL: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_URL }}
      CWA_GITHUB_TEST_REPO_BRANCH: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2

      - name: SetOutputs
        id: set-outputs
        run: |
          echo "::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}"
          echo "::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}"
          echo "::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}"

      - name: Echo test variables
        run: |
          echo "CWA_GITHUB_TEST_REPO_NAME: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_NAME }}"
          echo "CWA_GITHUB_TEST_REPO_URL: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_URL }}"
          echo "CWA_GITHUB_TEST_REPO_BRANCH: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}"



  EC2LinuxIntegrationTestITAR:
    needs: [ StartLocalStackITAR, GenerateTestMatrix, OutputEnvVariables ]
    name: 'EC2LinuxITAR'
    uses: ./.github/workflows/ec2-integration-test.yml
    with:
      github_sha: ${{github.sha}}
      test_dir: terraform/ec2/linux
      job_id: ec2-linux-integration-test
      test_props: ${{needs.GenerateTestMatrix.outputs.ec2_linux_itar_matrix}}
      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}
      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
      localstack_host: ${{needs.StartLocalStackITAR.outputs.local_stack_host_name}}
      region: us-gov-east-1
      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}
    secrets: inherit


  StopLocalStackITAR:
    name: 'StopLocalStackITAR'
    if: ${{ always() && needs.StartLocalStackITAR.result == 'success' }}
    needs: [ StartLocalStackITAR, EC2LinuxIntegrationTestITAR, OutputEnvVariables ]
    uses: ./.github/workflows/stop-localstack.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      region: us-gov-east-1
      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
      github_sha: ${{github.sha}}
      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}